CREATE SCHEMA IF NOT EXISTS 'bd_aula_functions DEFAULT CHARACTER SET utf8;

USE 'bd_aula_functions";

TABELA ALUNO

CREATE TABLE IF NOT EXISTS aluno (

id INT NOT NULL,



nome VARCHAR(100) NOT NULL

matricula VARCHAR(45) NOT NULL,

data nascimento DATE NULL, data matricula DATE NOT NULL

PRIMARY KEY (id), UNIQUE INDEX matricula_UNIQUE (matricula ASC))

ENGINE InnoDB;

TABELA PROVA

CREATE TABLE IF NOT EXISTS prova (

id INT NOT NULL

data_realizacao DATE NOT NULL

descricao VARCHAR(255) NOT NULL

PRIMARY KEY (id))

ENGINE = InnoDB;

Tabela nota

- TABELA ΝΟΤΑ

CREATE TABLE IF NOT EXISTS nota (

aluno_id INT NOT NULL

prova_id INT NOT NULL,

valor_nota DECIMAL (15,2) NULL

PRIMARY KEY (aluno_id, prova_id)

INDEX fk_aluno_has_prova_proval (prova_id INDEX fk_aluno_has_prova_alunol (aluno_id

CONSTRAINT fk_aluno_has_prova_aluno1 FOREIGN KEY ( aluno_id)

REFERENCES aluno (id)

ON DELETE NO ACTION

ON UPDATE NO ACTION,

CONSTRAINT fk_aluno_has_prova_proval

FOREIGN KEY (prova_id

REFERENCES prova (id ) 3

ON DELETE NO ACTION

ON UPDATE NO ACTION)

ENGINE InnoDB;

INSERT INTO aluno (id, nome, matricula, data_nascimento, data_matricula) VALUES (1, 'MICHAEL JONH', '123A', STR_TO_DATE('23/08/1993', '%d/%m/%Y'), CURRENT_DATE()), (2, 'WILLIANS JUNIOR', '400B', STR_TO_DATE ('10/04/1993', '%d/%m/%Y'), CURRENT_DATE()), (3,'JOHN BILLBOARD', '4208', STR_TO_DATE('30/07/1993', '%d/%m/%Y'), CURRENT LATE()), (4,'JENNY KILLY', '010A', NULL, STR_TO_DATE('25/01/2014', '%d/%m/%Y'));


INSERT INTO prova(id, data_realizacao, descricao) VALUES

(1, STR_TO_DATE('30/03/2014', '%d/%m/%Y'), 'Prova A1'),

(2, STR_TO_DATE('30/04/2014', '%d/%m/%Y'), 'Prova B1'),

(3, STR_TO_DATE ('30/05/2014', '%d/%m/%Y'), 'Prova C1'), (4, STR_TO_DATE('30/07/2014', '%d/%m/%Y'), 'Prova A2'),

(5, STR_TO_DATE('30/08/2014', '%d/%m/%Y'), Prova B2'),

(6, STR_TO_DATE('30/09/2014', '%d/%m/%Y'), 'Prova C2');

INSERT INTO nota (aluno_id, prova_id, valor_nota) VALUES

#ALUNO 1

(1, 1, 10),

(1, 2, 9.8),

(1, 3, 8), (1, 4, 10),

(1, 5, 10),

(1, 6, 9),

#ALUNO 2

(2, 1, 7),

(2, 2, 7.5),

(2, 3, 6), (2, 5, 8.5), (2, 6, 9),

(2, 4, 8),

#ALUNO 3

(3, 1, 9),

(3, 2, 9), (3, 3, 9),

(3, 4, 10),

(3, 5, 10),

(3, 6, 9.8),

#ALUNO 4

(4, 1, 1 3), (4, 2, 6),

(4, 3, 7), (4, 4, 8),

(4, 5, 7),

(4, 6, 7);

DELIMITER $

CREATE FUNCTION calcula_nota (nota NUMERIC (15,2)) RETURNS NUMERIC(15,2)

BEGIN

DECLARE peso INT;

#Se a nota do aluno for maior que 9.5 então sua nota terá um peso maior IF nota 9.5 THEN

SET peso = 2;

ELSE

SET peso = 1;

END IF;

RETURN (nota peso) / 20;

END $

DELIMITER;

SELECT a.nome, p.descricao, calcula_nota(n.valor_nota) AS nota_calculada, n.valor_nota AS nota_original FROM aluno a INNER JOIN nota n ON a.id n.aluno_id

INNER JOIN prova p ON n.prova_id = p.id

ORDER BY a.id, nota_calculada DESC;





/*1) Criar uma function (Mostra_Maior_Nota) para
retornar a maior nota na tabela nota do nosso
exemplo.*/

DELIMITER $

CREATE FUNCTION Mostra_Maior_Nota() RETURNS DECIMAL(10,2)
BEGIN
    DECLARE maior DECIMAL(10,2);
    SELECT MAX(valor_nota) INTO maior FROM nota;
    RETURN maior;
END $

DELIMITER ;

drop function Mostra_Maior_Nota;

SELECT Mostra_Maior_Nota() AS maior_nota;

/*2) Criar uma function (Mostra_Media) de cada aluno,
ou seja, aluno_id 1 fez 6 provas, então vamos ter
que somar as notas dele e dividir por 6.*/

DELIMITER $

CREATE FUNCTION Mostra_Media(media_aluno INT) RETURNS DECIMAL(10,2)
BEGIN
    DECLARE media DECIMAL(10,2);
    DECLARE total_provas INT;
    
    IF media_aluno IS NULL THEN
        SELECT AVG(valor_nota) INTO media FROM nota;
    ELSE
        SELECT COUNT(valor_nota) INTO total_provas FROM nota WHERE aluno_id = media_aluno;
    
        IF total_provas > 0 THEN
            SELECT SUM(valor_nota) / total_provas INTO media FROM nota WHERE aluno_id = media_aluno;
        ELSE
            SET media = 0;
        END IF;
    END IF;
    
    RETURN media;
END $

DELIMITER ;

SELECT id, nome, Mostra_Media(id) AS media_aluno FROM aluno;



